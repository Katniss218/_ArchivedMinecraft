
function GetRPGEntityProperty(entity: entity, property: number) :: number:
	# tags contain id
	set {_tags::*} to tag "Tags" of nbt compound of {_entity}
	set {_entity_id} to {_tags::2}
	return {rpg::entitydef::%{_entity_id}%::%{_property}%}


function GetRPGItemProperty(item: item, property: text) :: number:
	set {_item_id} to tag "item_id" of nbt compound of {_item}
	return {rpg::itemdef::%{_item_id}%::%{_property}%}

# returns the total property
function GetProperty(entity: entity, property: text) :: number:
	# Players use a total of their items to get the property
	if {_entity} is a player:
		set {_weapon} to GetRPGItemProperty({_entity}'s weapon, {_property})
		set {_shield} to GetRPGItemProperty({_entity}'s offhand tool, {_property})
		set {_head} to GetRPGItemProperty({_entity}'s helmet, {_property})
		set {_chest} to GetRPGItemProperty({_entity}'s chestplate, {_property})
		set {_legs} to GetRPGItemProperty({_entity}'s leggings, {_property})
		set {_feet} to GetRPGItemProperty({_entity}'s boots, {_property})
		return {_weapon} + {_shield} + {_head} + {_chest} + {_legs} + {_feet}
	# Arrows use cached value of the shooter to get the property
	if {_entity} is an arrow:
		return metadata value "rpg::damage" of {_entity} parsed as number


	# RPG Entities use their own values to get the property
	return GetRPGEntityProperty({_entity}, {_property})
	
options:
	damage_multiplier_min: 0.75
	damage_multiplier_max: 1.25
	damage_multiplier_crit: 2.0


on shoot:
	# hand item can be something other than a bow.
	set metadata value "rpg::damage" of projectile to GetProperty(shooter, "attack_damage")
	set metadata value "rpg::crit" of projectile to GetProperty(shooter, "crit_chance")
	# need to account for how pulled back it is.


on damage:
	if attacker is a player:
		# Attacker values
		set {_damage} to GetProperty(attacker, "attack_damage")
		set {_crit_chance} to GetProperty(attacker, "crit_chance")
	   
		# Victim values
		set {_defence} to GetProperty(victim, "armor")
		set {_damage_reduction} to GetProperty(victim, "damage_reduction")
	   
		# Damage calculation
		set {_actual_damage} to a random number between ({_damage} * {@damage_multiplier_min}) and ({_damage} * {@damage_multiplier_max})
		if {_defence} is set:
			set {_actual_damage} to {_actual_damage} - {_defence}
		if {_actual_damage} is less than 1:
			set {_actual_damage} to 1
		if {_damage_reduction} is set:
			set {_actual_damage} to {_actual_damage} * (1-{_damage_reduction})
		if a random integer between 0 and 99 is less than ({_crit_chance} * 100):
			set {_actual_damage} to {_actual_damage} * {@damage_multiplier_crit}
		set damage to {_actual_damage} / 2

		set {_healthRemoved} to 0 - {_actual_damage}
		send "%sign_to_color({_healthRemoved})%%number_to_text_with_sign({_healthRemoved})% HP (%(victim's health - damage) * 2%/%victim's maximum health * 2%)" to attacker

		# play particles
		# show damage value as hologram
